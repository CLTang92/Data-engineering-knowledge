REST API
----------

GET - retrieve data
POST - write new data (new)
PUT - write - update data (replace)
DELETE - delete junk

CRUD 

postman
- get api link and run



================how to consume API======================================================
python environment

*first time need to open terminal and pip3 install requests
import requests #to send requests
import json


#requests.get(<api url>)
response = requests.get('https://api.stackexchange.com/2.3/questions?order=desc&sort=activity&site=stackoverflow')

print(response.json())
print(response.json()['items']) #just print the list of questions inside "items" index

for data in response.json()['items']:
	if data['answer_count'] == 0:
		print(data['title'])
		print(data['link'])
	else:
		print("skipped")
	print()


=============================HOW TO CREATE API==========================================================
python environment
1) can create a folder called api
2) open terminal and go into the api directory
3) create virtual environment
#venv means virtual environment, create to isolate dependency for the specific application, .venv is the name of the virtual environment, after this will see a new folder .venv created
python3 -m venv .venv
4) #activate the virtual environment
source .venv/bin/activate
5) install dependency
pip3 install flask
pip3 install flask-sqlalchemy #use to work with database
pip3 freeze > requirement.txt #to save the dependency in a file, for future people work with the project and use this to setup same virtual environment

6) #create file in terminal
touch application.py

7) open file created "application.py" and do coding

#setup flask
from flask import Flask
app = Flask(__name__)

#endpoint

#create app to say hello
@app.route('/')
def index():
	return 'Hello!'

#make sure it is working, so in terminal run application

#everytime when open terminal need to run below 2 codes, create environment variables
export FLASK_APP=application.py
export FLASK_ENV=development

#run flask api
flask run
8) copy the url at running on.. eg. http//127.xxxxx/

=until here app is up====

#create another app
@app.route('/drinks')
def get_drinks():
	return {"drinks":"drink data"}


====connect to database============

#create a model
class Drink(db.Model):
	id = db.Column(db.Integer, primary_key=True)
	name = db.Column(db.String(80), unique=True, nullable=False) #set unique and not null
	description = db.Column(db.String(120)) #set length limit to 120

	def __repr__(self):
		return f"{self.name} - {self.description}"

==============set up database for table Drink using python (in terminal)===========

1) python file, type
from flask_sqlalchemy import SQLAlchemy

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db' #to configure sqlite database

db = SQLAlchemy(app) #pass our app


2) ctrl c #quite from existing server **if exit from python interactive mode is exit()
3) type python3 #open interactive mode in python
4) in terminal, type 

from application import db #import db from our application.py

db.create_all() #create table, it will create database as well since don't have that

from application import Drink

drink = Drink(name="Grape Soda", description="Tastes like grapes")

drink #now have a drink object, output is Grape Soda - Tastes like grapes

#add to table
db.session.add(drink)
db.session.commit()

#get all drinks
Drink.query.all()

#add another drink, same steps
db.session.add(Drink(name="Cherry", description="Tastes like that one ice cream"))
db.session.commit()

#get all drinks
Drink.query.all() #output format [xxxxxxxxxx,xxxxxxxxxxx]

#exit and back to flask
exit()

5) flask run
6) now modify earlier drinks route to get drinks from database

@app.route('/drinks')
def get_drinks():
	drinks = Drink.query.all()

	output = []
	
	#to get a list of dictionary, because if not will get object of type Drink is not JSON serializable
	for drink in drinks
		drink_data = {'name': drink.name, 'description':drink.description}
		output.append(drink_data)
	return {"drinks":output}

7) pass id in the api to get specific record


@app.route('/drinks/<id>')
def get_drink(id):
	drink = Drink.query.get_or_404(id) #drink object

	return jsonify({"name":drink.name, "description":drink.description}) #use jsonify if not working with dictionaries
	return {"name":drink.name, "description":drink.description} #dictionaries are serializable, so no need jsonify

*can go to website, right click inspect, go to network tab, click folder, content type is json


8) add drinks

from flask import Flask, request
@app.route('/drinks', methods=['POST'])
def add_drink():
	drink = Drink(name=request.json['name'], description=request.json['description]}
	db.session.add(drink)
	db.session.commit()
	return {'id': drink.id}

#####postman#########

set to POST: <url is the drink url> eg. http://xxxx/drinks

at body tab, json, raw:

{
	"name": "Cola",
	"description": "Delicious"
}

then hit send

9) further checking

##postman####


##to get all drinks
change to  GET: <url is the drink url> eg. http://xxxx/drinks

##to get drink with specific id
change to  GET: <url is the drink url with id> eg. http://xxxx/drinks/1


10) Delete drink

@app.route('/drinks/<id>', methods=['DELETE'])
def delete_drink(id):
	drink = Drink.query.get(id)
	if drink is None:
		return {"error": "not found"}
	db.session.delete(drink)
	db.session.commit()
	return {"message":"complete"}

########postman##################

set to DELETE: <drink url with id> eg. http://xxxxxxxxxxx/drinks/3

and click send

raw, json, the body part without code
